import com.kageiit.jacobo.JacoboTask

import java.text.NumberFormat

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'maven-publish'
    id 'org.jetbrains.dokka'
    id 'com.ncorti.ktfmt.gradle' version '0.7.0'
    id 'com.diffplug.spotless' version '6.0.5'
    id 'hypersdk.plugin'
    id 'com.form.diff-coverage'
}

hyperSdkPlugin {
    clientId = "ixigoprod"
    sdkVersion = "2.1.13"
}

spotless {
    kotlin {
        ktfmt()
        target '**/*.kt'
    }
}

group = 'com.ixigo.sdk'
version = '3.21.2.16'

android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "$version"

        buildConfigField("String", "SDK_VERSION", "\"$versionName\"")

        testInstrumentationRunner 'com.ixigo.sdk.test.util.EspressoRunner'
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            enableUnitTestCoverage true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
    }
    testOptions {

        unitTests {
            includeAndroidResources = true
            all {
                jacoco {
                    includeNoLocationClasses = true
                    excludes = ['jdk.internal.*']
                }
                jvmArgs '-noverify'
            }
        }
    }
}

task overallCoverageReport(dependsOn: ['jacocoTestReport']) {
    // Prints Coverage to be picked up by CI
    doLast {
        new File(buildDir, "reports/jacoco/jacocoTestReport/html/index.html").readLines().each {
            def matcher = it =~ /(\d{1,3}(,\d{3})*) of (\d{1,3}(,\d{3})*)/
            if (matcher.count > 0) {
                def format = NumberFormat.getInstance(Locale.US)
                def missedInstructions = format.parse(matcher[0][1])
                def totalInstructions = format.parse(matcher[0][3])
                def coveragePercentage = (100.0 - 100.0 * (missedInstructions / totalInstructions)).round(4)
                println("Total Coverage = ${coveragePercentage}%")
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.getRequired().set(true)
        html.getRequired().set(true)
    }

    def fileFilter = [
            '**/R.class',
            '**/R2.class', // ButterKnife Gradle Plugin.
            '**/R$*.class',
            '**/R2$*.class', // ButterKnife Gradle Plugin.
            '**/*$$*',
            '**/*$ViewInjector*.*', // Older ButterKnife Versions.
            '**/*$ViewBinder*.*', // Older ButterKnife Versions.
            '**/*_ViewBinding*.*', // Newer ButterKnife Versions.
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*', // Dagger auto-generated code.
            '**/*_Factory*.*', // Dagger auto-generated code.
            '**/*$JsonObjectMapper.*', // LoganSquare auto-generated code.
            '**/*$inlined$*.*', // Kotlin specific, Jacoco can not handle several "$" in class name.
            '**/*$Icepick.*', // Icepick auto-generated code.
            '**/*$StateSaver.*', // android-state auto-generated code.
            '**/*AutoValue_*.*', // AutoValue auto-generated code.
            // Custom Added
            '**/*$Creator*', // Parcelize generated classes
            '**/databinding/*' // Data Binding
    ]

    // java compiled classes
    def javaTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    // kotlin compiled classes
    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)

    def debugTree = files([javaTree, kotlinTree])

    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files([debugTree]))
    executionData.from(fileTree(
            dir: "$buildDir",
            includes: [
                    "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
                    "outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec"
            ]
    ))
}


task jacocoDiffCoverage(dependsOn: ['jacocoTestReport']) {

    doLast {
        def targetBranch = project.getProperties().get("targetBranch") ?: "development"
        def diffFile = new File(buildDir, "diff.patch")
        if (diffFile.exists()) diffFile.delete()
        else diffFile.createNewFile()

        exec {
            // Create the diff using `...` which matches what a merge request does
            commandLine "bash", "-c", "git diff ${targetBranch}..."
            standardOutput new FileOutputStream(diffFile)
        }

        diffCoverageReport {

            diffSource.file = diffFile

            jacocoExecFiles = files(jacocoTestReport.executionData)
            classesDirs = files(jacocoTestReport.classDirectories)
            srcDirs = files(jacocoTestReport.sourceDirectories)

            reports {
                html = true
                xml = true
            }
        }
        diffCoverage.executeAction()
    }

}

task coberturaTask(dependsOn: ['jacocoDiffCoverage'], type: JacoboTask) {
    def report = file("${project.buildDir}/reports/jacoco/diffCoverage/report.xml")
    onlyIf {
        return report.exists()
    }
    jacocoReport = report
    coberturaReport = file("${project.buildDir}/reports/cobertura/cobertura.xml")
    srcDirs = "$project.projectDir/src/main/java"
    mustRunAfter(jacocoDiffCoverage)
}

jacocoDiffCoverage.finalizedBy(coberturaTask)

dependencies {
    compileOnly files('libs/google-pay-client-api-1.0.1.aar')
    testImplementation files('libs/google-pay-client-api-1.0.1.aar')
    def fragmentVersion = '1.3.6'
    def firebaseVersion = '28.4.2'

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.squareup.okhttp3:okhttp:4.9.2'
    implementation 'androidx.browser:browser:1.3.0'

    // Moshi: Json parsing
    implementation 'com.squareup.moshi:moshi-kotlin:1.12.0'
    implementation("com.squareup.moshi:moshi-adapters:1.12.0")

    // Logging
    implementation 'com.jakewharton.timber:timber:4.7.1'
    // Version 5 is only compatible with AGP7

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:$firebaseVersion")
    compileOnly 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-config-ktx'

    // Analytics
    implementation 'com.google.android.gms:play-services-analytics:17.0.1'

    // SMS Retrieval
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:17.4.0'


    // Unit Tests
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    testImplementation("androidx.fragment:fragment-testing:$fragmentVersion")
    testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test.espresso:espresso-web:3.4.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'androidx.test:core-ktx:1.4.0'
    testImplementation 'androidx.test:rules:1.4.0'
    testImplementation 'org.robolectric:robolectric:4.6.1'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.2'
    testImplementation 'org.awaitility:awaitility-kotlin:4.1.1'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'org.mockito:mockito-inline:4.2.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4"
    testImplementation "androidx.arch.core:core-testing:2.1.0"

    // Instrumented Tests
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.9.2'
    androidTestImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito-inline:2.28.1'
    androidTestImplementation 'commons-io:commons-io:2.11.0'
    // Used to read html files when testing WebView

    // Need this in implementation since IdlingResources are added in Prod code (although not registered)
    implementation 'androidx.test.espresso.idling:idling-net:3.4.0'
    implementation 'com.google.android.gms:play-services-tasks:18.0.2'

    //Minkasu sdk
    implementation 'com.minkasu:minkasu-2fa:3.0.0'

    // amazon pay dependencies
    compileOnly 'in.juspay:amazonpay-silentpay-sdk:1.2.0'
    compileOnly 'in.juspay:amazonpay-hardened-silentpay-sdk:1.3.0'
    compileOnly 'com.jakewharton.timber:timber:4.7.1'
    compileOnly 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    compileOnly 'androidx.work:work-runtime:2.7.1'
    compileOnly "androidx.browser:browser:1.0.0"

    // simpl fingerprint sdk
    compileOnly 'com.simpl.android:fingerprintSDK:1.1.4'
    testImplementation 'com.simpl.android:fingerprintSDK:1.1.4'
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task downloadIxigoJsSdkFromRemote() {
    def scriptUrl = "https://build4.ixigo.com/js-sdk/index.umd.js" // Replace with the actual URL of your script
    def destinationDir = "${projectDir}/src/main/assets"
    def destinationFile = "ixigo-sdk.js" // Replace with the desired filename

    doLast {
        try {
            URL url = new URL(scriptUrl)
            InputStream inputStream = url.openStream()
            File outputFile = new File(destinationDir, destinationFile)

            outputFile.withOutputStream { outputStream ->
                outputStream << inputStream
            }

            println "Script downloaded and placed in assets folder."
        } catch (Exception e) {
            println "Failed to download the script: ${e.message}"
            throw new GradleException("ixigo js sdk download failed.")
        }
    }
}

tasks.findByName("preBuild").dependsOn(downloadIxigoJsSdkFromRemote)

afterEvaluate {
    publishing {
        publications {
            snapshot(MavenPublication) {
                from components.release
                artifactId = "${project.name}"
                artifact androidSourcesJar
                version = "${version}-SNAPSHOT"
            }
            release(MavenPublication) {
                from components.release
                artifact androidSourcesJar
                artifactId = "${project.name}"
            }
        }

        repositories {
            maven {
                url = 'https://nexus.ixigo.com/nexus/content/repositories/androidshared'
                name = 'Nexus'
                credentials {
                    username = findProperty('nexusUser') ?: System.env.nexusUser
                    password = findProperty('nexusPassword') ?: System.env.nexusPassword
                }
            }
            maven {
                url = 'https://nexus.ixigo.com/nexus/content/repositories/androidshared-snapshots'
                name = 'NexusSnapshot'
                credentials {
                    username = findProperty('nexusUser') ?: "miguel"
                    password = findProperty('nexusPassword') ?: "76854b9b8"
                }
            }
        }
    }
}